// Code generated by easystruct. DO NOT EDIT.

package {{.Package}}

import (
	{{- range $key, $val := .Imports }}
	"{{ $key }}"
	{{- end }}
)
{{range $st := .Structs}}
func({{ $st.Receiver }} *{{ .Name }}) FromRequest(r *http.Request) error {
	{{ range .Fields -}}
	{{- if eq .Kind "varchar" -}}
	if sval := {{ .Source }}; sval != "" {
		{{ $st.Receiver }}.{{ .Name }} = {{ .Type }}(sval)
	}
	{{- end -}}
	{{- if eq .Kind "integer" -}} 
	if sval := {{ .Source }}; sval != "" {
		nval, err := strconv.Atoi(sval)
		if err != nil {
			return fmt.Errorf({{ .Error }}, err)
		}
		{{ $st.Receiver }}.{{ .Name }} = {{ .Type }}(nval)
	}	
	{{- end }}
	{{- if eq .Kind "double" -}} 
	if sval := {{ .Source }}; sval != "" {
		nval, err := strconv.ParseFloat(sval, 64)
		if err != nil {
			return fmt.Errorf({{ .Error }}, err)
		}
		{{ $st.Receiver }}.{{ .Name }} = {{ .Type }}(nval)
	}	
	{{- end }}
	{{- if eq .Kind "boolean" -}} 
	if sval := {{ .Source }}; sval != "" {
		bval, err := strconv.ParseBool(sval)
		if err != nil {
			return fmt.Errorf({{ .Error }}, err)
		}
		{{ $st.Receiver }}.{{ .Name }} = bval
	}	
	{{- end }}
	{{- if eq .Kind "strings" -}} 
	if sval := {{ .Source }}; sval != "" {
		{{ $st.Receiver }}.{{ .Name }} = strings.Split(sval, ",")
	}	
	{{- end }}
	{{ end -}}
	return nil
}
{{end}}